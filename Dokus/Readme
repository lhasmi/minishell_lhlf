# Project README
## TO DO :
- done - build a function to get builtins functions --> builtins.c
- done - change the call of the functions accordingly --> executor_helpers.c
- done - how do I want to store them (anthony_storingvars)
subgoals
- done - The get_env_name and get_env_value functions: I need to implement these functions such that they correctly split the environment string (in the form of key=value) into key and value respectively.

- done -  change the functions that look up the environment variables ('do_lookup') 
- done - change the function that updates the environment variables ('update_entry').

- done - implemented a function to look up the environment variable 'env_lookup' and update it 'env_update'. 

- done - The 'env_lookup' function should return a 't_env' pointer and the 'env_update' function should update the value of an existing 't_env' node.

- done - exit
- display exit at exit 
- pwd
- env OLDPWD and PWD do not update optimaly, optimize them
- do other builtins from the oder minishell: get_cmdpath_full() would need to handle resolving relative and absolute paths, checking the PATH environment variable, and more.
- pipes ( is 80% , not a lot of code)
- make sure it compiles before next meeting

- case export a, export a= check env and export in each case
- Note that is_owned indicates whether the value was dynamically allocated and needs to be freed. If the value passed to env_update is not dynamically allocated (e.g., it is a string literal or an array), is_owned should be set to 0, and value should not be freed.

Also note that we are using add_env_var to add new entries, assuming that it appends the new entry to the list if the list is non-empty. If this is not the case, you would need to modify this function or use a different function to add the new entry in a correct place.
- Memory management: As per the function create_env_node, the name and value are directly assigned to the node. If these are pointers returned by  get_env_name and get_env_value functions (after performing some memory allocation in them), I'll have to make sure that these are freed appropriately when I no longer need the node. Otherwise, this can result in memory leaks.

- make sure to check for NULL when using the return value of this get_env_name elsewhere in the code.


# for Lorenzo
- Define structs: 1) Node
		  2) Node_data
		  3) Redirections (enum & slice)
		  3) Slice
- Lexer:	Struct for tokens
		Create list of tokens
- Parser:	Function calling order
		Construct ast (just comments)

- design what a tree looks like
- understand why the tree looks like this
- diff between shell variables and environment variables later uses export

## Allowed Functions and Short Definitions :

Below are the allowed functions for this project:

1. `readline`: Reads user input from the terminal, automatically handling history and editing features.
2. `rl_clear_history`, `add_history`: Manages the command history in your shell.
3. `printf`, `malloc`, `free`, `write`, `read`: Standard C library functions used for printing output, managing dynamic memory, writing to file descriptors, and reading from file descriptors respectively.
4. `access`, `open`, `close`: Useful for working with files. `access` checks whether a file can be accessed in certain ways, `open` opens a file and `close` closes a file descriptor.
5. `fork`, `wait`, `waitpid`, `execve`: Essential functions for creating new processes, waiting for processes to finish, and replacing the current process image with a new one.
	# NOTE:
	The macro WIFEXITED(status) is used to check if a child process has terminated normally. It's a part of <sys/wait.h> header file and is typically used with waitpid() or wait() to determine the exit status of a child process. As per the rules of your assignment, you're allowed to use waitpid() or wait() and it's common and recommended to use WIFEXITED(status) with these.

6. `signal`, `sigaction`, `sigemptyset`, `sigaddset`, `kill`: Works with signals, a form of inter-process communication. They handle signals like SIGINT (sent when you press Ctrl-C), and others.
7. `getcwd`, `chdir`: Gets and changes the current working directory, needed for commands like `cd` and `pwd`.
8. `stat`, `lstat`, `fstat`: Retrieves information about files. Useful for commands that need to know about file properties.
9. `dup`, `dup2`, `pipe`: Manipulates file descriptors and sets up pipes, necessary for handling redirection and piping.
10. `strerror`, `perror`: Used for error reporting.
11. `getenv`: Reads environment variables.
12. `tcsetattr`, `tcgetattr`: Manipulates terminal attributes. Useful for putting the terminal into "raw mode" if you want to implement more advanced line-editing features.

The functions `rl_on_new_line`, `rl_replace_line`, `rl_redisplay`, `isatty`, `ttyname`, `ttyslot`, `ioctl`, `unlink`, `opendir`, `readdir`, `closedir`, `tgetent`, `tgetflag`, `tgetnum`, `tgetstr`, `tgoto`, `tputs`, and `wait3`, `wait4` are more specialized and may not be needed depending on the implementation.

## Necessary includes

Here are the necessary header files for the functions:

1. `readline`, `rl_clear_history`, `rl_on_new_line`, `rl_replace_line`, `rl_redisplay`, `add_history`: `<readline/readline.h>`, `<readline/history.h>`
2. `printf`, `malloc`, `free`: `<stdio.h>`, `<stdlib.h>`
3. `write`, `read`, `access`, `open`, `close`: `<unistd.h>`, `<fcntl.h>`
4. `fork`, `wait`, `waitpid`, `wait3`, `wait4`, `execve`: `<unistd.h>`, `<sys/wait.h>`
5. `signal`, `sigaction`, `sigemptyset`, `sigaddset`, `kill`: `<signal.h>`
6. `getcwd`, `chdir`: `<unistd.h>`
7. `stat`, `lstat`, `fstat`: `<sys/stat.h>`, `<sys/types.h>`
8. `unlink`: `<unistd.h>`
9. `dup`, `dup2`, `pipe`: `<unistd.h>`
10. `opendir`, `readdir`, `closedir`: `<dirent.h>`
11. `strerror`, `perror`: `<string.h>`, `<errno.h>`
12. `isatty`, `ttyname`, `ttyslot`: `<unistd.h>`
13. `ioctl`: `<sys/ioctl.h>`
14. `getenv`: `<stdlib.h>`
15. `tcsetattr`, `tcgetattr`: `<termios.h>`
16. `tgetent`, `tgetflag`, `tgetnum`, `tgetstr`, `tgoto`, `tputs`: `<term.h>`, `<curses.h>`
